{
  "name": "Text to Query to Slack",
  "nodes": [
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-2025-04-14",
          "mode": "list",
          "cachedResultName": "gpt-4.1-2025-04-14"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1504,
        80
      ],
      "id": "610961e4-3fe3-489c-8ed5-995e2a45831f",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "UAWpNwMCLySTsnwy",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n\t\"type\": \"object\",\n\t\"properties\": {\n\t\t\"query\": {\n\t\t\t\"type\": \"string\"\n\t\t}\n\t}\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        1632,
        80
      ],
      "id": "55a867ff-d3da-4910-8eee-8a7af05f6cbb",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        2144,
        80
      ],
      "id": "d9193a62-7288-41c8-bcfc-8f4a4d3be6f9",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "UAWpNwMCLySTsnwy",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Convert this into a user friendly message by looking at the user's original question and the query result\n\nQUERY RESULT: \n{{ $json.toJsonString() }}\n\nOriginal Question:\n{{ $('When chat message received').first().json.chatInput }}",
        "messages": {
          "messageValues": [
            {
              "message": "Look at the query result and the user's question and return a user friendly message."
            }
          ]
        },
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        2064,
        -144
      ],
      "id": "9289303a-5f74-4d61-9821-652b0ad2b570",
      "name": "메시지 생성"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "{{ $json.output.query }}",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1840,
        -144
      ],
      "id": "b25e4063-9795-43d6-84e6-ebe3f117fd22",
      "name": "쿼리 실행",
      "credentials": {
        "postgres": {
          "id": "BxZ2hizZudEjhI0G",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n      'CREATE TABLE ' || table_name || ' (' || E'\\n' ||\n      string_agg(\n          '    ' || column_name || ' ' || \n          CASE \n  WHEN data_type = 'character varying' THEN 'VARCHAR(' || character_maximum_length || ')'\n  WHEN data_type = 'integer' AND column_default LIKE 'nextval%' THEN 'SERIAL PRIMARY KEY'\n  WHEN data_type = 'numeric' THEN 'DECIMAL(' || numeric_precision || ',' || numeric_scale || ')'\n  WHEN data_type = 'timestamp without time zone' THEN 'TIMESTAMP'\n  WHEN data_type = 'boolean' THEN 'BOOLEAN'\n  ELSE UPPER(data_type)\n  END ||\n  CASE WHEN is_nullable = 'NO' AND column_default NOT LIKE 'nextval%' THEN ' NOT NULL' ELSE '' END ||\n  CASE WHEN column_default IS NOT NULL AND column_default NOT LIKE 'nextval%' \n  THEN ' DEFAULT ' || column_default ELSE '' END,\n  E',\\n' ORDER BY ordinal_position\n  ) || E'\\n' || ');' || E'\\n\\n' AS create_statement\n  FROM information_schema.columns \n  WHERE table_schema = 'public' \n    AND table_name IN ({{ $json.output.tables.map(tableName => `'${tableName}'`) }})\n  GROUP BY table_name\n  ORDER BY table_name;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1040,
        -144
      ],
      "id": "0d2d6d28-1cdc-4d31-8350-394fb4a46dbc",
      "name": "스키마 조회",
      "credentials": {
        "postgres": {
          "id": "BxZ2hizZudEjhI0G",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "let schema = ''\n\nfor (const item of $input.all()) {\n  schema += `${item.json.create_statement}\\n\\n`\n}\n\nreturn [{schema}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1264,
        -144
      ],
      "id": "a8e08ed6-68ab-4476-b0c5-370c5f7dcaae",
      "name": "schema text"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n  col.table_name,\n  COALESCE(obj_description(c.oid), 'No description available') AS table_description,\n  string_agg(col.column_name, ', ' ORDER BY col.ordinal_position) AS all_columns\nFROM information_schema.columns col\n  LEFT JOIN pg_class c ON c.relname = col.table_name\n  LEFT JOIN pg_namespace n ON n.oid = c.relnamespace\nWHERE col.table_schema = 'public'\n  AND n.nspname = 'public'\nGROUP BY col.table_name, c.oid\nORDER BY col.table_name;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        240,
        -144
      ],
      "id": "76d92a15-77fe-4679-915e-d1497aad7a5b",
      "name": "테이블 이름 추출",
      "credentials": {
        "postgres": {
          "id": "BxZ2hizZudEjhI0G",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "let schema = ''\n\nfor (const item of $input.all()) {\n  schema += `tableName: ${item.json.table_name}\n  tableDescription: ${item.json.table_description}\n  columnList: ${item.json.all_columns}`\n}\n\nreturn [{schema}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        464,
        -144
      ],
      "id": "6c3319f0-71e0-456b-94c9-5ff7e8695306",
      "name": "schema text1"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-2025-04-14",
          "mode": "list",
          "cachedResultName": "gpt-4.1-2025-04-14"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        704,
        80
      ],
      "id": "7e018e0c-dc1d-461c-913d-6dbd79e496a8",
      "name": "OpenAI Chat Model2",
      "credentials": {
        "openAiApi": {
          "id": "UAWpNwMCLySTsnwy",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n\t\"type\": \"object\",\n\t\"properties\": {\n\t\t\"tables\": {\n\t\t\t\"type\": \"array\",\n\t\t\t\"tableName\": {\n\t\t\t\t\"type\": \"string\"\n\t\t\t}\n\t\t}\n\t}\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        832,
        80
      ],
      "id": "0300b863-47fd-49c2-a42d-c73ecaf5dad9",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('When chat message received').first().json.chatInput }}",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "=TABLE DESCRIPTION:\n{{ $json.schema }}\n\nBy looking at the table descriotion above, which contains information about the name of tables and their relative descriotions along with the list of columns, return the list of names of the tables that you need to access in order to retrieve data related to the user's question."
            }
          ]
        },
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        688,
        -144
      ],
      "id": "896daed9-fe90-4e48-be47-424f7fa6853b",
      "name": "테이블 리스트 추출"
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C090LK7R98U",
          "mode": "list",
          "cachedResultName": "new-channel"
        },
        "text": "={{ $json.text }}\nQuery:\n```\n{{ $('create query').item.json.output.query }}\n```",
        "otherOptions": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        2416,
        -144
      ],
      "id": "256c7467-f6bf-4aac-ba55-7d1218e59592",
      "name": "Send a message",
      "webhookId": "714e19f5-6640-4240-bbce-757baa4c57b0",
      "credentials": {
        "slackApi": {
          "id": "Nz07ane1F4uwr7jq",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.3,
      "position": [
        16,
        -144
      ],
      "id": "826ad727-245b-43a8-aef7-7c7691aa4a61",
      "name": "When chat message received",
      "webhookId": "a96ad83d-8bf1-4e52-891c-e9adb853c8d7"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('When chat message received').first().json.chatInput }}",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "=DATABASE SCHEMA:\n{{ $json.schema }}\n\nLooking at the database schema above, convert a user's question into a SQL query to fetch data from the database. return the SQL query. "
            }
          ]
        },
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        1488,
        -144
      ],
      "id": "c42cb189-e407-449b-96ed-2b340ffe70d7",
      "name": "create query"
    }
  ],
  "pinData": {},
  "connections": {
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "create query",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "create query",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "메시지 생성",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "쿼리 실행": {
      "main": [
        [
          {
            "node": "메시지 생성",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "스키마 조회": {
      "main": [
        [
          {
            "node": "schema text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "schema text": {
      "main": [
        [
          {
            "node": "create query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "테이블 이름 추출": {
      "main": [
        [
          {
            "node": "schema text1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "schema text1": {
      "main": [
        [
          {
            "node": "테이블 리스트 추출",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "테이블 리스트 추출",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "테이블 리스트 추출",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "테이블 리스트 추출": {
      "main": [
        [
          {
            "node": "스키마 조회",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "메시지 생성": {
      "main": [
        [
          {
            "node": "Send a message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "테이블 이름 추출",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "create query": {
      "main": [
        [
          {
            "node": "쿼리 실행",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "865d549f-6dd7-43e4-86fd-559f990c85b6",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "58539c9ed2495393c7d57a5cf3bb4571c2152ab782e2d8382c9e454ab731b748"
  },
  "id": "vB1ICAzq9TlgXJVD",
  "tags": []
}